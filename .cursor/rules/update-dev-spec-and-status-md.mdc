---
alwaysApply: false
---
# Development Specification Update Rule

## Purpose
This rule ensures that the development specification and status document remains current and accurate after any code changes, feature additions, or functional updates in the basketball statistics app. It also ensures alignment with the functional specification.

## When to Apply
This rule should be automatically applied after:
- ‚úÖ **Code changes** - Any modifications to Java files, XML layouts, or configuration files
- ‚úÖ **Feature implementation** - Addition of new functionality or UI components
- ‚úÖ **Bug fixes** - Resolution of issues that affect documented behavior
- ‚úÖ **Database changes** - Schema modifications or data model updates
- ‚úÖ **UI/UX updates** - Changes to layouts, navigation, or user interactions
- ‚úÖ **Architecture changes** - Modifications to app structure or design patterns
- ‚úÖ **Specification changes** - Updates to functional requirements or user interface specifications

## Required Actions
When this rule is triggered, the AI assistant must:

1. **Review Current State**
   - Examine the changes made to the codebase
   - Identify which features or components were affected
   - Assess impact on overall app functionality

2. **Update Development Status**
   - Open and review `spec/dev_spec_and_status.md`
   - Update completion status for affected components
   - Modify progress indicators (‚úÖ Completed, üöß In Progress, ‚è≥ Next Up)
   - Add new tasks or components if introduced
   - Cross-reference with `spec/specification.md` for functional requirements alignment

3. **Maintain Documentation Accuracy**
   - Ensure technical specifications match current implementation
   - Update database schema documentation if models changed
   - Revise component descriptions to reflect actual behavior
   - Add notes about implementation decisions or technical debt
   - **Specification Compliance**: Check if implementation aligns with `spec/specification.md`
   - **Specification Updates**: If functional requirements need changes, propose updates to user for approval

4. **Update Status Sections**
   - **Completed Tasks**: Mark finished features as completed
   - **In Progress**: Update current development status
   - **Next Steps**: Adjust priorities based on new changes
   - **Known Issues**: Add any new bugs or limitations discovered

## Quality Standards
The updated documentation must:
- ‚úÖ Accurately reflect the current state of the codebase
- ‚úÖ Use consistent formatting and terminology
- ‚úÖ Maintain clear progress tracking with appropriate emojis
- ‚úÖ Include relevant technical details for developers
- ‚úÖ Update timestamps or version information where applicable
- ‚úÖ Ensure functional specifications remain aligned with implementation

## Example Update Scenarios
- **New Activity Created**: Update component status and add to completed features
- **Database Model Added**: Update schema documentation and mark data layer progress
- **UI Layout Changed**: Revise interface descriptions and component details
- **Bug Fixed**: Move from "Known Issues" to resolved, update component status
- **Specification Mismatch**: Propose functional specification updates when implementation differs from requirements
- **Feature Enhancement**: Update both technical and functional specifications when capabilities are expanded

This rule ensures the development specification remains a reliable source of truth for project status and technical implementation details, while maintaining alignment with functional requirements.